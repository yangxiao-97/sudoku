{"version":3,"sources":["webpack:///webpack/bootstrap 74390b56ffb4d19f0bf1","webpack:///./js/index.js","webpack:///./js/ui/grid.js","webpack:///./js/core/tool.js","webpack:///./js/core/sudoku.js","webpack:///./js/core/generator.js","webpack:///./js/core/check.js","webpack:///./js/ui/popupnumbers.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;;;;;;ACzBD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,MAAM;AAChC,sCAAqC,WAAW;AAChD,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA,UAAS;AACT,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA,uB;;;;;;AC3GA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;AACA;AACA;AACA,oBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;;;;;;AC/EA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,E;;;;;;ACnBA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,cAAc;AACxC;AACA;AACA,6BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,cAAc;AACxC;AACA,6BAA4B,cAAc;AAC1C;AACA;AACA;AACA,6BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,cAAc;AACxC;AACA;AACA,8BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA,E;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,kBAAiB,KAAK;AACtB,iBAAgB,IAAI;AACpB,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,G","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 74390b56ffb4d19f0bf1","const Grid = require('./ui/grid')\r\nconst PopupNumbers = require('./ui/popupnumbers')\r\nconst grid = new Grid($('#container'))\r\ngrid.build()\r\ngrid.layout()\r\n\r\nconst popupnumbers = new PopupNumbers($('#popupNumbers'))\r\ngrid.bindPopup(popupnumbers)\r\n\r\n$('#check').on('click', (e) => {\r\n  if (grid.check()) {\r\n    alert('成功')\r\n  }\r\n})\r\n\r\n$('#reset').on('click', (e) => {\r\n  grid.reset()\r\n})\r\n\r\n$('#clear').on('click', (e) => {\r\n  grid.clear()\r\n})\r\n\r\n$('#rebuild').on('click', (e) => {\r\n  grid.rebuild()\r\n})\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/index.js\n// module id = 0\n// module chunks = 0","const Toolkit = require(\"../core/tool\");\r\nconst Sudoku = require(\"../core/sudoku\");\r\nconst Checker = require(\"../core/check\");\r\n\r\n//生成九宫格\r\nclass Grid {\r\n  constructor(container) {\r\n    this._$container = container;\r\n  }\r\n  build() {\r\n    const sudoku = new Sudoku();\r\n    sudoku.make();\r\n    const matrix = sudoku.puzzleMatrix;\r\n\r\n    //为宫定义class行与列\r\n    const rowGroupClasses = [\"row_g_top\", \"row_g_middle\", \"row_g_bottom\"];\r\n    const colGroupClasses = [\"col_g_left\", \"col_g_center\", \"col_g_right\"];\r\n    //每一行创建一个div将每一行的值new成一个span\r\n    const $cells = matrix.map(rowValues => rowValues\r\n      .map((cellValue, colIndex) => {\r\n        return $(\"<span>\")\r\n          .addClass(colGroupClasses[colIndex % 3])\r\n          .addClass(cellValue ? \"fixed\" : \"empty\")\r\n          .text(cellValue);\r\n      }));\r\n    //从cells中得到div数组\r\n    const $divArray = $cells.map(($spanArray, rowIndex) => {\r\n      return $(\"<div>\")\r\n        .addClass(\"row\")\r\n        .addClass(rowGroupClasses[rowIndex % 3])\r\n        .append($spanArray);\r\n    });\r\n    //添加到container中\r\n    this._$container.append($divArray);\r\n  }\r\n  layout() {\r\n    const width = $(\"span:first\", this._$container).width();\r\n    $(\"span\", this._$container)\r\n      .height(width)\r\n      .css({\r\n        \"line-height\": `${width}px`,\r\n        \"font-size\": width < 32 ? `${width / 2 }` : \"\"\r\n      });\r\n  }\r\n\r\n  //检查用户解谜结果，成功进行提示，失败显示错误标记\r\n  check() {\r\n    //TODO 从界面获取需要检查的数据\r\n    const data = this._$container.children()\r\n      .map((rowIndex, div) => {\r\n        return $(div).children()\r\n          .map((colIndex, span) => parseInt($(span).text()) || 0);\r\n      })\r\n      .toArray()\r\n      .map($data => $data.toArray());\r\n    console.log(data);\r\n    const checker = new Checker(data);\r\n    if (checker.check()) {\r\n      return true;\r\n    }\r\n    //检查不成功，标记\r\n    const marks = checker.matrixMarks;\r\n    this._$container.children()\r\n      .each((rowIndex, div) => {\r\n        $(div).children().each((colIndex, span) => {\r\n          const $span = $(span);\r\n          if ($span.is(\".fixed\") || marks[rowIndex][colIndex]) {\r\n            $span.removeClass(\"error\");\r\n          } else {\r\n            $span.addClass(\"error\");\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  //重置当前棋盘至初始状态\r\n  reset() {\r\n    this._$container.find(\"span:not(.fixed)\")\r\n      .removeClass(\"error mark1 mark2\")\r\n      .addClass(\"empty\")\r\n      .text(0);\r\n  }\r\n\r\n  //清理错误标记\r\n  clear() {\r\n    this._$container.find(\"span.error\")\r\n      .removeClass(\"error\");\r\n  }\r\n\r\n  //重建新的谜盘，开始新的一局\r\n  rebuild() {\r\n    this._$container.empty();\r\n    this.build();\r\n    this.layout();\r\n  }\r\n\r\n  bindPopup(popupNumbers) {\r\n    this._$container.on(\"click\", \"span\", e => {\r\n      const $cell = $(e.target);\r\n      if ($cell.is(\".fixed\")) {\r\n        return;\r\n      }\r\n      popupNumbers.popup($cell);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = Grid;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/ui/grid.js\n// module id = 1\n// module chunks = 0","//生成行\r\n//生成列\r\n//洗牌算法\r\n\r\n//矩阵和数组：二维数组\r\nconst matrixToolkit = {\r\n  makeRow(v = 0) {\r\n    const array = new Array(9);\r\n    array.fill(v);\r\n    return array;\r\n  },\r\n\r\n  makeMatrix(v = 0) {\r\n    return Array.from({\r\n      length: 9\r\n    }, () => this.makeRow(v));\r\n  },\r\n  shuffle(array) {\r\n    const length = array.length;\r\n    const endIndex = length - 1;\r\n    for (let i = 0; i < endIndex; i++) {\r\n      const j = i + Math.floor(Math.random() * (length - i));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  },\r\n  //检查指定位置是否能够填写数字n\r\n  checkFillable(matrix, n, rowIndex, colIndex) {\r\n    const row = matrix[rowIndex];\r\n    const column = this.makeRow().map((v, i) => matrix[i][colIndex]);\r\n    const {\r\n      boxIndex\r\n    } = boxToolkit.convertToBoxIndex(rowIndex, colIndex);\r\n    //宫\r\n    const box = boxToolkit.getBoxCells(matrix, boxIndex);\r\n    for (let i = 0; i < 9; i++) {\r\n      if (row[i] === n || column[i] === n || box[i] === n)\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n};\r\n//宫坐标系工具\r\nconst boxToolkit = {\r\n  getBoxCells(matrix, boxIndex) {\r\n    const startRowIndex = Math.floor(boxIndex / 3) * 3;\r\n    const startColIndex = boxIndex % 3 * 3;\r\n    const result = [];\r\n    for (let cellIndex = 0; cellIndex < 9; cellIndex++) {\r\n      const rowIndex = startRowIndex + Math.floor(cellIndex / 3);\r\n      const colIndex = startColIndex + cellIndex % 3;\r\n      result.push(matrix[rowIndex][colIndex]);\r\n    }\r\n    return result;\r\n  },\r\n  convertToBoxIndex(rowIndex, colIndex) {\r\n    return {\r\n      boxIndex: Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3),\r\n      cellIndex: rowIndex % 3 * 3 + colIndex % 3\r\n    };\r\n  },\r\n\r\n  convertFromBoxIndex(boxIndex, cellIndex) {\r\n    return {\r\n      rowIndex: Math.floor(boxIndex / 3) * 3 + Math.floor(cellIndex / 3),\r\n      colIndex: boxIndex % 3 * 3 + cellIndex % 3\r\n    };\r\n  }\r\n};\r\n//工具集\r\nmodule.exports = class Toolkit {\r\n  // 矩阵和数组相关的工具\r\n  static get matrix() {\r\n    return matrixToolkit;\r\n  }\r\n  //宫坐标系相关的工具\r\n  static get box() {\r\n    return boxToolkit;\r\n  }\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/tool.js\n// module id = 2\n// module chunks = 0","//游戏生成\r\n//1、生成随机数独面板\r\n//2、按比例随机去除部分数据\r\nconst Generator = require(\"./generator\");\r\n\r\nmodule.exports = class Sudoku {\r\n  constructor() {\r\n    //生成解决方案\r\n    const generator = new Generator();\r\n    generator.generate();\r\n    this.solutionMatrix = generator.matrix;\r\n  }\r\n\r\n  make(level = 5) {\r\n    //生成面板\r\n    this.puzzleMatrix = this.solutionMatrix.map(row => {\r\n      return row.map(cell => Math.random() * 9 < level ? 0 : cell);\r\n    });\r\n  }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/sudoku.js\n// module id = 3\n// module chunks = 0","//生成数独解决方案\r\nconst Toolkit = require(\"./tool\");\r\n\r\nmodule.exports = class Generator {\r\n\r\n  generate() {\r\n    while (!this.internalGenerate()) {\r\n      //TODO\r\n      console.warn(\"try again\");\r\n    }\r\n  }\r\n  internalGenerate() {\r\n    // 入口方法\r\n    this.matrix = Toolkit.matrix.makeMatrix();\r\n    this.orders = Toolkit.matrix.makeMatrix()\r\n      .map(row => row.map((v, i) => i))\r\n      .map(row => Toolkit.matrix.shuffle(row));\r\n    for (let n = 1; n <= 9; n++) {\r\n      if (!this.fillNumber(n)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  fillNumber(n) {\r\n    return this.fillRow(n, 0);\r\n  }\r\n  //递归\r\n  fillRow(n, rowIndex) {\r\n    if (rowIndex > 8) {\r\n      return true;\r\n    }\r\n    //行数据\r\n    const row = this.matrix[rowIndex];\r\n    //选择填写位置\r\n    const orders = this.orders[rowIndex];\r\n    for (let i = 0; i < 9; i++) {\r\n      //判断数据 如果此位置已有值，跳过\r\n      const colIndex = orders[i];\r\n      if (row[colIndex]) {\r\n        continue;\r\n      }\r\n      //检查此位置是否能填\r\n      if (!Toolkit.matrix.checkFillable(this.matrix, n, rowIndex, colIndex)) {\r\n        continue;\r\n      }\r\n      row[colIndex] = n;\r\n      //去下一行填写n 如果填写失败则继续寻找当前行下一个位置\r\n      if (!this.fillRow(n, rowIndex + 1)) {\r\n        row[colIndex] = 0;\r\n        continue;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/generator.js\n// module id = 4\n// module chunks = 0","// 检查\r\nfunction checkArray(array) {\r\n  const length = array.length;\r\n  //标记\r\n  const marks = new Array(length);\r\n  marks.fill(true);\r\n  for (let i = 0; i < length - 1; i++) {\r\n    if (!marks[i]) {\r\n      continue;\r\n    }\r\n    const v = array[i];\r\n    //判断是否为有效数字，0表示无效，1-9 有效\r\n    if (!v) {\r\n      marks[i] = false;\r\n      continue;\r\n    }\r\n    //判断是否存在重复数字 i+1=>9 是否有与位置i重复的数据\r\n    for (let j = i + 1; j < length; j++) {\r\n      if (v === array[j]) {\r\n        marks[i] = marks[j] = false;\r\n      }\r\n    }\r\n  }\r\n  return marks;\r\n}\r\n\r\nconst Toolkit = require(\"./tool\");\r\n//输入：matrix 用户完成的数独数据，9*9\r\n//处理：对matrix 行、列、宫进行检查，并填写marks\r\n//输出：检查是否成功、marks\r\nmodule.exports = class Checker {\r\n  constructor(matrix) {\r\n    this._matrix = matrix;\r\n    this._matrixMarks = Toolkit.matrix.makeMatrix(true);\r\n  }\r\n\r\n  get matrixMarks() {\r\n    return this._matrixMarks;\r\n  }\r\n\r\n  get isSuccess() {\r\n    return this._success;\r\n  }\r\n\r\n  check() {\r\n    this.checkRows();\r\n    this.checkCols();\r\n    this.checkBoxes();\r\n    //检查是否成功:Array.prototype.every()\r\n    this._success = this._matrixMarks.every(row => row.every(mark => mark))\r\n    return this._success;\r\n  }\r\n  checkRows() {\r\n    for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n      const row = this._matrix[rowIndex];\r\n      const marks = checkArray(row);\r\n      for (let colIndex = 0; colIndex < marks.length; colIndex++) {\r\n        if (!marks[colIndex]) {\r\n          this._matrixMarks[rowIndex][colIndex] = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  checkCols() {\r\n    for (let colIndex = 0; colIndex < 9; colIndex++) {\r\n      const cols = [];\r\n      for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n        cols[rowIndex] = this._matrix[rowIndex][colIndex];\r\n      }\r\n      const marks = checkArray(cols);\r\n      for (let rowIndex = 0; rowIndex < marks.length; rowIndex++) {\r\n        if (!marks[rowIndex]) {\r\n          this._matrixMarks[rowIndex][colIndex] = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  checkBoxes() {\r\n    for (let boxIndex = 0; boxIndex < 9; boxIndex++) {\r\n      const boxes = Toolkit.box.getBoxCells(this._matrix, boxIndex);\r\n      const marks = checkArray(boxes);\r\n      for (let cellIndex = 0; cellIndex < 9; cellIndex++) {\r\n        if (!marks[cellIndex]) {\r\n          const {\r\n            rowIndex,\r\n            colIndex\r\n          } = Toolkit.box.convertFromBoxIndex(boxIndex, cellIndex);\r\n          this.matrixMarks[rowIndex][colIndex] = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/check.js\n// module id = 5\n// module chunks = 0","//处理弹出操作面板\r\n//cell --(click)-->popup\r\n//popup --(click)--> n --(fill)--> cell\r\nmodule.exports = class PopupNumbers {\r\n  constructor($panel) {\r\n    this._$panel = $panel.hide().removeClass(\"hidden\");\r\n    this._$panel.on(\"click\", \"span\", e => {\r\n      const $cell = this._$targetCell;\r\n      const $span = $(e.target);\r\n      //mark1,mark2 回填样式\r\n      if ($span.hasClass(\"mark1\")) {\r\n        if ($cell.hasClass(\"mark1\")) {\r\n          $cell.removeClass(\"mark1\");\r\n        } else {\r\n          $cell.removeClass(\"mark2\")\r\n            .addClass(\"mark1\");\r\n        }\r\n        //回填样式\r\n      } else if ($span.hasClass(\"mark2\")) {\r\n        if ($cell.hasClass(\"mark2\")) {\r\n          $cell.removeClass(\"mark2\");\r\n        } else {\r\n          $cell.removeClass(\"mark1\")\r\n            .addClass(\"mark2\");\r\n        }\r\n        //回填样式\r\n      } else if ($span.hasClass(\"empty\")) {\r\n        //取消数字填写，取消mark\r\n        $cell.text(0)\r\n          .addClass(\"empty\");\r\n      } else {\r\n        //1-9 回填数字\r\n        $cell.removeClass(\"empty\").text($span.text());\r\n      }\r\n      this.hide();\r\n    })\r\n  }\r\n  popup($cell) {\r\n    this._$targetCell = $cell;\r\n    const {\r\n      left,\r\n      top\r\n    } = $cell.position();\r\n    this._$panel\r\n      .css({\r\n        left: `${left}px`,\r\n        top: `${top}px`\r\n      })\r\n      .show()\r\n  }\r\n  hide() {\r\n    this._$panel.hide();\r\n  }\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/ui/popupnumbers.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}